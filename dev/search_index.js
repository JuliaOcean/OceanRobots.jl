var documenterSearchIndex = {"docs":
[{"location":"examples/#Notebooks","page":"Notebooks","title":"Notebooks","text":"","category":"section"},{"location":"examples/","page":"Notebooks","title":"Notebooks","text":"note: Note\nThe static html rendering of the notebooks (this website) lack the interactivity that comes from Running Examples yourself.","category":"page"},{"location":"examples/#Included-Notebooks","page":"Notebooks","title":"Included Notebooks","text":"","category":"section"},{"location":"examples/","page":"Notebooks","title":"Notebooks","text":"OceanOPS.jl (➭ code link) : global ocean observing systems\nShipCruise_CCHDO.jl (➭ code link) : ship CTD and other data\nFloat_Argo.jl (➭ code link) : Argo profiling float data\nDrifter_GDP.jl (➭ code link) : drifter time series\nDrifter_CloudDrift.jl (➭ code link) : drifter statistics\nGlider_Spray.jl (➭ code link) : underwater glider data\nBuoy_NWP_NOAA.jl (➭ code link) : NOAA station data (a few days)\nBuoy_NWP_NOAA_monthly.jl (➭ code link) : NOAA station data (monthly means) \nMooring_WHOTS.jl (➭ code link) : WHOTS mooring data\nSatelliteAltimetry.jl (➭ code link) : gridded satellite data","category":"page"},{"location":"examples/#More-Notebooks","page":"Notebooks","title":"More Notebooks","text":"","category":"section"},{"location":"examples/","page":"Notebooks","title":"Notebooks","text":"For Argo and state estimates, see ArgoData.jl\nFor drifter data simulations, see IndividualDisplacements.jl","category":"page"},{"location":"examples/#Using-Notebooks","page":"Notebooks","title":"Using Notebooks","text":"","category":"section"},{"location":"examples/","page":"Notebooks","title":"Notebooks","text":"The examples are most easily run using Pluto.jl. To do it this way, one just needs to copy a code link provided above and paste this URL into the Pluto.jl interface.","category":"page"},{"location":"reference/#User-Interface-(API)","page":"User Interface","title":"User Interface (API)","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"Each type of ocean data gets :","category":"page"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"a simple read function that downloads data if needed. \na default plot function that depicts some of the data.","category":"page"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"For mapping purposes, it is useful to download country polygons.","category":"page"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using MeshArrays, Shapefile, DataDeps\npol_file=demo.download_polygons(\"ne_110m_admin_0_countries.shp\")\npol=MeshArrays.read_polygons(pol_file)\nnothing #hide","category":"page"},{"location":"reference/#Surface-Drifters","page":"User Interface","title":"Surface Drifters","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\ndrifter=read(SurfaceDrifter(),1)\nplot(drifter,pol=pol)","category":"page"},{"location":"reference/#Argo-Profilers","page":"User Interface","title":"Argo Profilers","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, ArgoData, CairoMakie\nargo=read(ArgoFloat(),wmo=2900668)\nplot(argo,pol=pol)","category":"page"},{"location":"reference/#CTD-profiles","page":"User Interface","title":"CTD profiles","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\ncruise=ShipCruise(\"33RR20160208\")\nplot(cruise,variable=\"salinity\",colorrange=(33.5,35.0))","category":"page"},{"location":"reference/#NOAA-Buoys","page":"User Interface","title":"NOAA Buoys","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\nbuoy=read(NOAAbuoy(),41046)\nplot(buoy,[\"PRES\",\"ATMP\",\"WTMP\"],size=(900,600))","category":"page"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\nbuoy=read(NOAAbuoy_monthly(),44013)\nplot(buoy;option=:demo)","category":"page"},{"location":"reference/#WHOTS-Mooring","page":"User Interface","title":"WHOTS Mooring","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots\nwhots=read(OceanSite(),:WHOTS)\n\nusing CairoMakie, Dates\ndate1=DateTime(2005,1,1)\ndate2=DateTime(2005,2,1)\nplot(whots,date1,date2)","category":"page"},{"location":"reference/#Spray-Gliders","page":"User Interface","title":"Spray Gliders","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\ngliders=read(Gliders(),\"GulfStream.nc\")\nplot(gliders,1,pol=pol)","category":"page"},{"location":"reference/#Sea-Level-Anomaly","page":"User Interface","title":"Sea Level Anomaly","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"using OceanRobots, CairoMakie\nsla=read(SeaLevelAnomaly(),:sla_podaac)\nplot(sla)","category":"page"},{"location":"reference/#read","page":"User Interface","title":"read","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"read","category":"page"},{"location":"reference/#Base.read","page":"User Interface","title":"Base.read","text":"read(x::OceanSite, ID=:WHOTS)\n\nRead OceanSite data.    \n\n\n\n\n\nread(x::ArgoFloat;wmo=2900668)\n\nNote: the first time this method is used, it calls ArgoData.GDAC.files_list()  to get the list of Argo floats from server, and save it to a temporary file.\n\nusing OceanRobots, ArgoData\nread(ArgoFloat(),wmo=2900668)\n\n\n\n\n\nread(x::SurfaceDrifter,ii::Int)\n\nOpen file number ii from NOAA ftp server using NCDatasets.jl.\n\nServer : ftp://ftp.aoml.noaa.gov/pub/phod/lumpkin/hourly/v2.00/netcdf/\n\nNote: the first time this method is used, it calls GDP.list_files()  to get the list of drifters from server, and save it to a temporary file.\n\nusing OceanRobots\nsd=read(SurfaceDrifter(),1)\n\n\n\n\n\nread(x::CloudDrift, file)\n\nRead a GDP/CloudDrift file.    \n\n\n\n\n\nread(x::NOAAbuoy,args...)\n\nRead a NOAA buoy file (past month).    \n\n\n\n\n\nread(x::NOAAbuoy_monthly,args...)\n\nRead a NOAA buoy file (historical).    \n\n\n\n\n\nread(x::Gliders, file::String)\n\nRead a Spray Glider file.    \n\n\n\n\n\n","category":"function"},{"location":"reference/#plot","page":"User Interface","title":"plot","text":"","category":"section"},{"location":"reference/","page":"User Interface","title":"User Interface","text":"plot","category":"page"},{"location":"reference/#MakieCore.plot","page":"User Interface","title":"MakieCore.plot","text":"plot(x::SurfaceDrifter)\n\nusing OceanRobots, CairoMakie\ndrifter=read(SurfaceDrifter(),1)\nplot(drifter)\n\n\n\n\n\nplot(x::OceanSite,args...)\n\nusing OceanRobots, Dates\nwhots=read(OceanSite(),:WHOTS)\nplot(whots,DateTime(2005,1,1),DateTime(2005,2,1),size=(900,600))\n\n\n\n\n\nplot(x::NOAAbuoy,var)\n\nusing OceanRobots, CairoMakie\nbuoy=read(NOAAbuoy(),41046)\nplot(buoy,\"PRES\",size=(900,600))\n\n\n\n\n\nplot(x::NOAAbuoy_monthly, var=\"\"; option=:demo)\n\nusing OceanRobots\nbuoy=read(NOAAbuoy_monthly(),44013)\nplot(buoy;option=:demo)\n\n\n\n\n\nplot(b::SeaLevelAnomaly; dates=[], kwargs...)\n\nusing OceanRobots\nsla=read(SeaLevelAnomaly(),:sla_podaac)\nplot(sla)\n\n\n\n\n\nplot(x::ShipCruise; \nmarkersize=6,pol=Any[],colorrange=(2,20),\nsize=(900,600),variable=\"temperature\")\n\nusing OceanRobots, CairoMakie\nx=ShipCruise(\"33RR20160208\")\nplot(x)\n\n\n\n\n\nplot(x::ArgoFloat; option=:standard, markersize=2,pol=Any[])\n\nusing OceanRobots, ArgoData, CairoMakie\n\nargo=read(ArgoFloat),wmo=2900668)\n\nf1=plot(argo,option=:samples)\nf2=plot(argo,option=:TS)\nf3=plot(argo,option=:standard)\n\n\n\n\n\nplot(x::Gliders,ID)\n\nusing OceanRobots, CairoMakie\ngliders=read(Gliders(),\"GulfStream.nc\")\nplot(gliders,1,size=(900,600))\n\n\n\n\n\n","category":"function"},{"location":"#OceanRobots.jl","page":"Home","title":"OceanRobots.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package can be used to access, analyze, process, and simulate data generated by ocean robots. These ocean observing platforms collect observations in the field, and allow us to monitor climate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanRobots.jl includes profiling floats, drifters, gliders, and moorings as illustrated in the examples. It provides a unified and simple user interface to each of these data sets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"reference.md\",\n    \"examples.md\",\n    \"internals.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Global Data Coverage Individual Data Platforms\n(Image: ) (Image: )","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [OceanOPS, GDP, GDP_CloudDrift, NOAA, GliderFiles, ArgoFiles, OceanSites, CCHDO, SLA, podaac_sla, cmems_sla]","category":"page"},{"location":"internals/#OceanRobots.OceanOPS.get_list","page":"Internals","title":"OceanRobots.OceanOPS.get_list","text":"get_list(nam=:Argo; status=\"OPERATIONAL\")\n\nGet list of platform IDs from OceanOPS API.\n\nFor more information see \n\nhttps://www.ocean-ops.org/api/1/help/\nhttps://www.ocean-ops.org/api/1/help/?param=platformstatus\n\nlist_Argo1=OceanOPS.get_list(:Argo,status=\"OPERATIONAL\")\nlist_Argo2=OceanOPS.get_list(:Argo,status=\"CONFIRMED\")\nlist_Argo3=OceanOPS.get_list(:Argo,status=\"REGISTERED\")\nlist_Argo4=OceanOPS.get_list(:Argo,status=\"INACTIVE\")\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.OceanOPS.get_list_pos","page":"Internals","title":"OceanRobots.OceanOPS.get_list_pos","text":"get_list_pos(nam=:Argo; status=\"OPERATIONAL\")\n\nGet list of platform positions from OceanOPS API.\n\nFor more information see \n\nhttps://www.ocean-ops.org/api/1/help/\nhttps://www.ocean-ops.org/api/1/help/?param=platformstatus\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.OceanOPS.get_platform-Tuple{Any}","page":"Internals","title":"OceanRobots.OceanOPS.get_platform","text":"get_platform(i)\n\nGet info on platform with id=i (e.g., float or drifter) from OceanOPS API.\n\nFor more information see https://www.ocean-ops.org/api/1/help/\n\nlist_Drifter=OceanOPS.get_list(:Drifter)\ntmp=OceanOPS.get_platform(list_Drifter[1000])\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.OceanOPS.get_url","page":"Internals","title":"OceanRobots.OceanOPS.get_url","text":"get_url(nam=:Argo; status=\"OPERATIONAL\")\n\nAPI/GET URL to OceanOPS API that will list platforms of chosen type.\n\nTwo URLs are reported; the second includes platform positions.\n\nFor more information see \n\nhttps://www.ocean-ops.org/api/1/help/\nhttps://www.ocean-ops.org/api/1/help/?param=platformstatus\nhttps://www.ocean-ops.org/api/1/help/?param=platformtype\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.OceanOPS.list_platform_types-Tuple{}","page":"Internals","title":"OceanRobots.OceanOPS.list_platform_types","text":"list_platform_types()\n\nList platform types.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.read-Tuple{SurfaceDrifter, Int64}","page":"Internals","title":"Base.read","text":"read(x::SurfaceDrifter,ii::Int)\n\nOpen file number ii from NOAA ftp server using NCDatasets.jl.\n\nServer : ftp://ftp.aoml.noaa.gov/pub/phod/lumpkin/hourly/v2.00/netcdf/\n\nNote: the first time this method is used, it calls GDP.list_files()  to get the list of drifters from server, and save it to a temporary file.\n\nusing OceanRobots\nsd=read(SurfaceDrifter(),1)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP.download","page":"Internals","title":"OceanRobots.GDP.download","text":"download(list_files,ii=1)\n\nDownload one drifter file from NOAA ftp server.\n\nftp://ftp.aoml.noaa.gov/pub/phod/lumpkin/hourly/v2.00/netcdf/\n\nlist_files=GDP.list_files()\nfil=GDP.download(list_files,1)\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.GDP.list_files-Tuple{}","page":"Internals","title":"OceanRobots.GDP.list_files","text":"list_files()\n\nGet list of drifter files from NOAA ftp server or the corresponding webpage.\n\nftp://ftp.aoml.noaa.gov/pub/phod/lumpkin/hourly/v2.00/netcdf/\nhttps://www.aoml.noaa.gov/ftp/pub/phod/lumpkin/hourly/v2.00/netcdf/\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.read-Tuple{CloudDrift, Any}","page":"Internals","title":"Base.read","text":"read(x::CloudDrift, file)\n\nRead a GDP/CloudDrift file.    \n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.add_ID!-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.add_ID!","text":"add_ID!(df,ds)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.add_index!-Tuple{Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.add_index!","text":"add_index!(df)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.region_subset-NTuple{4, Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.region_subset","text":"region_subset(df,lons,lats,dates)\n\nSubset of df that's within specified date and position ranges.    \n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.to_DataFrame-Tuple{Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.to_DataFrame","text":"to_DataFrame(ds)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.to_Grid-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.to_Grid","text":"to_Grid(gdf,grid)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.GDP_CloudDrift.trajectory_stats-Tuple{Any}","page":"Internals","title":"OceanRobots.GDP_CloudDrift.trajectory_stats","text":"trajectory_stats(gdf)\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.read-Tuple{NOAAbuoy, Vararg{Any}}","page":"Internals","title":"Base.read","text":"read(x::NOAAbuoy,args...)\n\nRead a NOAA buoy file (past month).    \n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.read-Tuple{NOAAbuoy_monthly, Vararg{Any}}","page":"Internals","title":"Base.read","text":"read(x::NOAAbuoy_monthly,args...)\n\nRead a NOAA buoy file (historical).    \n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.download","page":"Internals","title":"OceanRobots.NOAA.download","text":"NOAA.download(sta::String,path=tempdir())\n\nDownload files for stations sta from ndbc.noaa.gov to path.\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.NOAA.download-2","page":"Internals","title":"OceanRobots.NOAA.download","text":"NOAA.download(stations::Union(Array,Int),path=tempdir())\n\nDownload files listed in stations from ndbc.noaa.gov to path.\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.NOAA.download-Tuple{Any}","page":"Internals","title":"OceanRobots.NOAA.download","text":"NOAA.download(MC::ModelConfig)\n\nDownload files listed in MC.inputs[\"stations\"] from ndbc.noaa.gov to pathof(MC).\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.download_historical_txt-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.NOAA.download_historical_txt","text":"NOAA.download_historical_txt(ID,years)\n\nDownload files from https://www.ndbc.noaa.gov to temporary folder for chosen float ID and years.\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.list_realtime-Tuple{}","page":"Internals","title":"OceanRobots.NOAA.list_realtime","text":"NOAA.list_realtime(;ext=:all)\n\nGet either files list from https://www.ndbc.noaa.gov/data/realtime2/ or list of buoy codes that provide some file type  (e.g. \"txt\" for \"Standard Meteorological Data\")\n\nlst0=NOAA.list_realtime()\nlst1=NOAA.list_realtime(ext=:txt)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.list_stations-Tuple{}","page":"Internals","title":"OceanRobots.NOAA.list_stations","text":"NOAA.list_stations()\n\nGet stations list from https://www.ndbc.noaa.gov/to_station.shtml\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.read_historical_monthly","page":"Internals","title":"OceanRobots.NOAA.read_historical_monthly","text":"NOAA.read_historical_monthly(ID,years)\n\nRead files from https://www.ndbc.noaa.gov to temporary folder for chosen float ID and year y.\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.NOAA.read_historical_nc-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.NOAA.read_historical_nc","text":"NOAA.read_historical_nc(ID,year)\n\nRead files from https://www.ndbc.noaa.gov to temporary folder for chosen float ID and year y.\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.read_historical_txt-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.NOAA.read_historical_txt","text":"NOAA.read_historical_txt(ID,y)\n\nRead files from https://www.ndbc.noaa.gov to temporary folder for chosen float ID and year y.\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.NOAA.read_station","page":"Internals","title":"OceanRobots.NOAA.read_station","text":"NOAA.read_station(station,path=tempdir())\n\nRead station file from specified path, and add meta-data (units and descriptions).\n\n\n\n\n\n","category":"function"},{"location":"internals/#Base.read","page":"Internals","title":"Base.read","text":"read(x::Gliders, file::String)\n\nRead a Spray Glider file.    \n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.ArgoFiles.download-Tuple{Any, Any}","page":"Internals","title":"OceanRobots.ArgoFiles.download","text":"ArgoFiles.download(files_list,wmo)\n\nDownload an Argo profiler file.    \n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.ArgoFiles.list_floats-Tuple{}","page":"Internals","title":"OceanRobots.ArgoFiles.list_floats","text":"ArgoFiles.list_floats(;list=DataFrame())\n\nGet list of Argo profilers from file ArgoFiles.list_floats().\n\nOr write provided list to file as a DataFrame.\n\nusing OceanRobots, ArgoData\nArgoFiles.list_floats(list=GDAC.files_list())\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.ArgoFiles.readfile-Tuple{Any}","page":"Internals","title":"OceanRobots.ArgoFiles.readfile","text":"ArgoFiles.readfile(fil)\n\nRead an Argo profiler file.    \n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.ArgoFiles.scan_txt","page":"Internals","title":"OceanRobots.ArgoFiles.scan_txt","text":"ArgoFiles.scan_txt(fil=\"ar_index_global_prof.txt\"; do_write=false)\n\nScan the Argo file lists and return summary tables in DataFrame format.  Write to csv file if istrue(do_write).\n\nArgoFiles.scan_txt(\"ar_index_global_prof.txt\",do_write=true)\nArgoFiles.scan_txt(\"argo_synthetic-profile_index.txt\",do_write=true)\n\n\n\n\n\n","category":"function"},{"location":"internals/#Base.read-2","page":"Internals","title":"Base.read","text":"read(x::OceanSite, ID=:WHOTS)\n\nRead OceanSite data.    \n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.OceanSites.index-Tuple{}","page":"Internals","title":"OceanRobots.OceanSites.index","text":"index()\n\nDownload, read and process the oceansites_index.txt file. Return a DataFrame.\n\noceansites_index=OceanSites.index()\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.OceanSites.read_WHOTS","page":"Internals","title":"OceanRobots.OceanSites.read_WHOTS","text":"read_WHOTS(fil)\n\nRead an WHOTS file.    \n\nfile=\"DATA_GRIDDED/WHOTS/OS_WHOTS_200408-201809_D_MLTS-1H.nc\"\ndata,units=OceanSites.read_WHOTS(file)\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.OceanSites.read_variables-Tuple{Any, Vararg{Any}}","page":"Internals","title":"OceanRobots.OceanSites.read_variables","text":"read_variables(file,args...)\n\nOpen file from opendap server.\n\nfile=\"DATA_GRIDDED/WHOTS/OS_WHOTS_200408-201809_D_MLTS-1H.nc\"\nOceanSites.read_variables(file,:lon,:lat,:time,:TEMP)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.CCHDO.ancillary_files-Tuple{Union{String, Symbol}}","page":"Internals","title":"OceanRobots.CCHDO.ancillary_files","text":"ancillary_files(cruise::Union{Symbol,String})\n\nusing OceanRobots\nID=\"33RR20230722\"\nlist=OceanRobots.CCHDO.ancillary_files(ID)\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.CCHDO.download","page":"Internals","title":"OceanRobots.CCHDO.download","text":"CCHDO.download(cruise::Union(Symbol,Symbol[]),path=tempdir())\n\nDownload files listed in stations from cchdo.ucsd.edu/cruise/ to path.\n\nusing OceanRobots\nID=\"33RR20160208\"\npath=OceanRobots.CCHDO.download(ID)\n\n\n\n\n\n","category":"function"},{"location":"internals/#OceanRobots.podaac_sla.subset-Tuple{}","page":"Internals","title":"OceanRobots.podaac_sla.subset","text":"podaac_sla.subset()\n\nFor download directions, see this site\n\npodaac_sla.subset()\n\n\n\n\n\n","category":"method"},{"location":"internals/#OceanRobots.cmems_sla.subset-Tuple{}","page":"Internals","title":"OceanRobots.cmems_sla.subset","text":"cmems_sla.subset()\n\nFor download directions, see this site\n\nFor data documentation, see this page\n\ncmems_sla.subset(username=username,password=password)\n\n\n\n\n\n","category":"method"}]
}
